PROGRAMMING AND SCRIPTING PROJECT - WORK PROGRESS DIARY

FISHER'S IRIS DATA SET


07/04/2020
Iris.csv file downloaded and added to the project

Data set online research:

The Iris flower data set or Fisher's Iris data set is a multivariate data set introduced by the British statistician and biologist Ronald Fisher in his 1936 paper "The use of multiple measurements in taxonomic problems".
Based on Fisher's linear discriminant model, the data set became a typical test case for many statistical classification techniques in machine learning such as support vector machines.

The set consists of measurements, in centimetres, of 50 samples of each of three types of iris flowers (setosa, versicolor and virginica) – 150 in total. 
For each of the type the following measurements were taken – sepal length, sepal width, petal length and petal width, that is four measurements in total.

https://en.wikipedia.org/wiki/Iris_flower_data_set
https://wikimili.com/en/Iris_flower_data_set


08/04/2020
Scatterplot pairs to be done:
1 Sepal length vs. Sepal width
2 Sepal length vs. Petal length
3 Sepal length vs. Petal width
4 Sepal width vs. Petal length
5 Sepal width vs. Petal width
6 Petal length vs. petal width

09/04/2020
Working on doing research on the Python libraries and commands that will be necessary for running the program.
The Iris Dataset is saved into a CSV file (Comma Separated Value file).
The following Python libraries are essential and are to be imported to be able to make the necessary program run (https://web.microsoftstream.com/video/025ef713-d7c8-492f-97f4-5590015da029?referrer=https:%2F%2Flearnonline.gmit.ie%2Fcourse%2Fview.php%3Fid%3D1598):

Pandas 
Matplotlib
Seaborn

Pandas is an open-source Python Library providing high-performance data manipulation and analysis tool using its powerful data structures. The name Pandas is derived from the word Panel Data – an Econometrics from Multidimensional data.
Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc.

import pandas as pd                           #This first line imports the Pandas module
from pandas import DataFrame, read_csv        #The read_csv method loads the data in a Pandas dataframe that we will name df.
df = pd.read_csv(filename)			# Opens, analyzes, and reads the CSV file provided, and stores the data in a DataFrame.
References: https://pythonspot.com/pandas-read-csv/
            https://realpython.com/python-csv/




Matplotlib
matplotlib.pyplot is a rich collection of command style functions. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, title, type of plot (for example, histogram or scatter) etc
plt.show() command displays all figures.

import matplotlib.pyplot as plt              #This first line imports Matplotlib library
Reference: https://matplotlib.org/3.2.0/tutorials/introductory/pyplot.html


Seaborn
Seaborn is a library for making statistical graphics in Python. It is built on top of matplotlib and closely integrated with pandas data structures.

Some of the functionality that seaborn offers is:

A dataset-oriented API for examining relationships between multiple variables

Specialized support for using categorical variables to show observations or aggregate statistics

Options for visualizing univariate or bivariate distributions and for comparing them between subsets of data

Automatic estimation and plotting of linear regression models for different kinds dependent variables

Convenient views onto the overall structure of complex datasets

High-level abstractions for structuring multi-plot grids that let you easily build complex visualizations

Concise control over matplotlib figure styling with several built-in themes

Tools for choosing color palettes that faithfully reveal patterns in your data

Seaborn aims to make visualization a central part of exploring and understanding data. Its dataset-oriented plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots.
Reference: https://seaborn.pydata.org/introduction.html

Seaborn.pairplot function
seaborn.pairplot(data, hue=None, hue_order=None, palette=None, vars=None, x_vars=None, y_vars=None, kind='scatter', diag_kind='auto', markers=None, height=2.5, aspect=1, corner=False, dropna=True, plot_kws=None, diag_kws=None, grid_kws=None, size=None)
Plot pairwise relationships in a dataset.
https://seaborn.pydata.org/generated/seaborn.pairplot.html

12/04/2020
Values that we need to output -

Minumum value of Iris Setosa:
Sepal length
Sepal width
Petal length
Petal width

Maximum value of Iris Setosa:
Sepal length
Sepal width
Petal length
Petal width

Average value of Iris Setosa:
Sepal length
Sepal width
Petal length
Petal width

Minumum value of Iris Virginica:
Sepal length
Sepal width
Petal length
Petal width

Maximum value of Iris Virginica:
Sepal length
Sepal width
Petal length
Petal width

Average value of Iris Virginica:
Sepal length
Sepal width
Petal length
Petal width

Minumum value of Iris Versicolor:
Sepal length
Sepal width
Petal length
Petal width

Maximum value of Iris Versicolor:
Sepal length
Sepal width
Petal length
Petal width

Average value of Iris Versicolor:
Sepal length
Sepal width
Petal length
Petal width

13/04/2020
Code for showing variables
#Import pandas library that allows to use its in-built functions, like max(), mnin(), mean() and describe()

import pandas as pd

df=pd.read_csv('Iris.csv')     # reads the csv file


#FINDING SEPAL LENGTH VALUES FOR ALL IRIS TYPES - MAX, MIN, MEAN AS WELL AS MORE DETAILED INFO WITH DESCRIBE FUNCTION
maximum = df['Sepal_length'].max()
minimum = df['Sepal_length'].min()
average = df['Sepal_length'].mean()
description = df['Sepal_length'].describe()


print('Maximum sepal length of all Iris species is ', maximum)
print('Minimum sepal length of all Iris species is ', minimum)
print('Average sepal length of all Iris species is ', average)
print('Here is some more detailed summarized information:', description)

#FINDING SEPAL WIDTH VALUES FOR ALL IRIS TYPES - MAX, MIN, MEAN AS WELL AS MORE DETAILED INFO WITH DESCRIBE FUNCTION
maximum = df['Sepal_width'].max()
minimum = df['Sepal_width'].min()
average = df['Sepal_width'].mean()
description = df['Sepal_width'].describe()

print('Maximum sepal width of all Iris species is ', maximum)
print('Minimum sepal width of all Iris species is ', minimum)
print('Average sepal width of all Iris species is ', average)
print('Here is some more detailed summarized information:', description)

#FINDING PETAL LENGTH VALUES FOR ALL IRIS TYPES - MAX, MIN, MEAN AS WELL AS MORE DETAILED INFO WITH DESCRIBE FUNCTION
maximum = df['Petal_length'].max()
minimum = df['Petal_length'].min()
average = df['Petal_length'].mean()
description = df['Petal_length'].describe()


print('Maximum petal length of all Iris species is ', maximum)
print('Minimum petal length of all Iris species is ', minimum)
print('Average petal length of all Iris species is ', average)
print('Here is some more detailed summarized information:', description)

#FINDING PETAL WIDTH VALUES FOR ALL IRIS TYPES - MAX, MIN, MEAN AS WELL AS MORE DETAILED INFO WITH DESCRIBE FUNCTION
maximum = df['Petal_width'].max()
minimum = df['Petal_width'].min()
average = df['Petal_width'].mean()
description = df['Petal_width'].describe()

print('Maximum petal width of all Iris species is ', maximum)
print('Minimum petal width of all Iris species is ', minimum)
print('Average petal width of all Iris species is ', average)
print('Here is some more detailed summarized information:', description)


#Iris Setosa only  - maximums for all four parameters
import pandas as pd

df=pd.read_csv('Iris.csv')                                                     
Setosa_maximum = df[df.Species=='setosa']                                             # df[df.Column_Name==''] function allows to narrow down only to the needed rows (reference: https://youtube.com/watch?V=xvpNA7bC8cs)
print('Maximum values for Iris Setosa flowers are: ',Setosa_maximum.max())

#Iris Versicolor only  - maximums for all four parameters

df=pd.read_csv('Iris.csv')                                                   
Versicolor_maximum = df[df.Species=='versicolor']        
print('Maximum values for Iris Versicolor flowers are: ',Versicolor_maximum.max())

#Iris Virginica only  - maximums for all four parameters

df=pd.read_csv('Iris.csv')                                                    
Virginica_maximum = df[df.Species=='virginica']        
print('Maximum values for Iris Virginica flowers are: ',Virginica_maximum.max())


#Iris Setosa only  - minimums for all four parameters

df=pd.read_csv('Iris.csv')                                                  
Setosa_minimum = df[df.Species=='setosa']       
print('Minimum values for Iris Setosa flowers are: ',Setosa_minimum.min())

#Iris Versicolor only  - minimums for all four parameters

df=pd.read_csv('Iris.csv')                    
Versicolor_minimum = df[df.Species=='versicolor']        
print('Minimum values for Iris Versicolor flowers are: ',Versicolor_minimum.min())

#Iris Virginica only  - minimums for all four parameters

df=pd.read_csv('Iris.csv')              
Virginica_minimum = df[df.Species=='virginica']        
print('Minimum values for Iris Virginica flowers are: ',Virginica_minimum.min())


#Iris Setosa only  - average values for all four parameters

df=pd.read_csv('Iris.csv')                  
Setosa_average = df[df.Species=='setosa']       
print('Average values for Iris Setosa flowers are: ',Setosa_average.mean())

#Iris Versicolor only  - average values for all four parameters

Versicolor_average = df[df.Species=='versicolor']        
print('Average values for Iris Versicolor flowers are: ',Versicolor_average.mean())

#Iris Virginica only  - average values for all four parameters

df=pd.read_csv('Iris.csv')                
Virginica_average = df[df.Species=='virginica']        
print('Average values for Iris Virginica flowers are: ',Virginica_average.mean())
